name: Testkube Docker Action.

on:
  push:
    branches:
      - vsukhin/feature/docker-action

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER_NAME_DEV: ${{ secrets.GKE_CLUSTER_NAME_DEV }} # Add your cluster name here.
  GKE_ZONE_DEV: ${{ secrets.GKE_ZONE_DEV }} # Add your cluster zone here.
  DEPLOYMENT_NAME: testkube # Add your deployment name here.
  POSTMAN_TEST_FILE_NANE: TestKube-Sanity.postman_collection.json
  POSTMAN_TEST_FILE_PATH: test/postman

jobs:
  get_dev_test:
    name: get test for DEV GKE.
    runs-on: ubuntu-latest
    steps:
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME_DEV }}
          location: ${{ env.GKE_ZONE_DEV }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Getting test CRD
      - name: Get test CRD
        id: test
        uses: kubeshop/testkube-docker-action@v1
        with:
#          command: get
#          resource: test 
#          namespace: testkube
#          api-key: 1234567890
#          api-uri: https://demo.testkube.io/results
#          parameters: sanity
          command: create
          resource: test 
          namespace: testkube
          parameters: "--type \"k6/script\" --name testkube-github-action"
          stdin: "import http from 'k6/http';\nimport { sleep,check } from 'k6';\n\nexport default function () {\n  const baseURI = `${__ENV.TESTKUBE_HOMEPAGE_URI || 'https://testkube.kubeshop.io'}`\n  check(http.get(`${baseURI}/`), {\n    'check testkube homepage home page': (r) =>\n      r.body.includes('Your Friendly Cloud-Native Testing Framework for Kubernetes'),\n  });\n\n\n  sleep(1);\n}\n"

      # Use the output from the `test` step
      - name: Get the output result
        run: echo '${{ steps.test.outputs.result }}'
